name: Release

on:
  push:
    tags: [ 'v*.*.*' ]

# Ensure the workflow has write permissions for releases and packages
permissions:
  contents: write
  packages: write
  actions: read

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for changelog generation
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
      
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Make Maven Wrapper executable
        run: chmod +x mvnw
      
      - name: Configure Git for JReleaser
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
      
      - name: Get version from tag
        id: version
        run: |
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Build release artifacts
        run: |
          ./mvnw -B clean package -DskipTests \
            -Dmaven.javadoc.skip=false \
            -Dmaven.source.skip=false
          
          # Also generate sources and javadoc JARs explicitly
          ./mvnw -B source:jar javadoc:jar -DskipTests
          
          # Copy the POM file to target directory for JReleaser
          cp pom.xml target/dynamodb-partiql-${{ steps.version.outputs.version }}.pom
          
          # Create staging directory for JReleaser
          mkdir -p target/staging-deploy
      
      - name: Run JReleaser for GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_NEXUS2_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          JRELEASER_NEXUS2_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
        run: |
          # Debug: Check if secrets are available
          echo "Checking environment variables..."
          echo "GITHUB_TOKEN is set: $([[ -n "$GITHUB_TOKEN" ]] && echo "YES" || echo "NO")"
          echo "JRELEASER_GPG_PUBLIC_KEY is set: $([[ -n "$JRELEASER_GPG_PUBLIC_KEY" ]] && echo "YES" || echo "NO")"
          echo "JRELEASER_GPG_SECRET_KEY is set: $([[ -n "$JRELEASER_GPG_SECRET_KEY" ]] && echo "YES" || echo "NO")"
          echo "JRELEASER_GPG_PASSPHRASE is set: $([[ -n "$JRELEASER_GPG_PASSPHRASE" ]] && echo "YES" || echo "NO")"
          echo "JRELEASER_NEXUS2_USERNAME is set: $([[ -n "$JRELEASER_NEXUS2_USERNAME" ]] && echo "YES" || echo "NO")"
          echo "JRELEASER_NEXUS2_PASSWORD is set: $([[ -n "$JRELEASER_NEXUS2_PASSWORD" ]] && echo "YES" || echo "NO")"
          
          # List artifacts to be released
          echo "Artifacts in target directory:"
          ls -la target/*.jar target/*.pom || true
          
          # Run JReleaser release using Maven Wrapper and custom settings
          ./mvnw -s settings.xml jreleaser:full-release \
            -Djreleaser.project.version=${{ steps.version.outputs.version }} \
            -Djreleaser.git-root-search=false \
            -Djreleaser.github.token=$GITHUB_TOKEN
      
      - name: Deploy to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Deploying to GitHub Packages..."
          ./mvnw -B deploy -DskipTests -s settings.xml
      
      - name: Setup GPG for Maven Central
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          # List the imported key
          gpg --list-secret-keys
      
      - name: Deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          echo "Deploying to Maven Central..."
          
          # Deploy using the deploy plugin with explicit configuration
          ./mvnw -B deploy:deploy-file \
            -Durl=https://oss.sonatype.org/service/local/staging/deploy/maven2/ \
            -DrepositoryId=ossrh \
            -Dfile=target/dynamodb-partiql-${{ steps.version.outputs.version }}.jar \
            -DpomFile=pom.xml \
            -Dfiles=target/dynamodb-partiql-${{ steps.version.outputs.version }}-sources.jar,target/dynamodb-partiql-${{ steps.version.outputs.version }}-javadoc.jar \
            -Dclassifiers=sources,javadoc \
            -Dtypes=jar,jar \
            -Dgpg.passphrase="$GPG_PASSPHRASE" \
            -s settings.xml
      
      - name: Upload JReleaser outputs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jreleaser-release-outputs
          path: |
            target/jreleaser/
            .jreleaser/
          retention-days: 7
