name: Test

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_call:
    # This allows the workflow to be called from other workflows

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  MAVEN_OPTS: -Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=${{ github.workspace }}/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN

permissions:
  contents: read
  checks: write
  pull-requests: write
  actions: read

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Make Maven Wrapper executable
      run: chmod +x mvnw

    - name: Clear AWS environment variables for unit tests
      run: |
        # Unset AWS environment variables to ensure validation tests work correctly
        unset AWS_ACCESS_KEY_ID
        unset AWS_SECRET_ACCESS_KEY  
        unset AWS_DEFAULT_REGION
        echo "AWS environment variables cleared for unit tests"
        
    - name: Run unit tests
      run: |
        # Run unit tests without AWS environment variables
        # Exclude all integration tests including nested classes
        unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_DEFAULT_REGION
        ./mvnw -B test -Dtest="!*IntegrationTest*,!*Integration" -Dmaven.javadoc.skip=true

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Make Maven Wrapper executable
      run: chmod +x mvnw

    # Ensure Docker daemon is available for Testcontainers
    - name: Start Docker daemon
      run: |
        sudo systemctl start docker
        docker info

    - name: Run integration tests with Testcontainers
      run: ./mvnw -B test -Dtest="*IntegrationTest*,*Integration" -Dmaven.javadoc.skip=true
      env:
        # Testcontainers configuration
        TESTCONTAINERS_RYUK_DISABLED: true
        TESTCONTAINERS_CHECKS_DISABLE: true
        # AWS credentials for tests
        AWS_ACCESS_KEY_ID: fakeMyKeyId
        AWS_SECRET_ACCESS_KEY: fakeSecretAccessKey
        AWS_DEFAULT_REGION: us-east-1

    - name: Generate integration test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Integration Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
        fail-on-error: false

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    permissions:
      contents: read
      checks: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Make Maven Wrapper executable
      run: chmod +x mvnw

    # Ensure Docker daemon is available for Testcontainers
    - name: Start Docker daemon
      run: |
        sudo systemctl start docker
        docker info

    - name: Run all tests with coverage (excluding performance tests)
      run: ./mvnw -B verify -Dtest="!*PerformanceTest" -Dmaven.javadoc.skip=true
      env:
        # Testcontainers configuration
        TESTCONTAINERS_RYUK_DISABLED: true
        TESTCONTAINERS_CHECKS_DISABLE: true
        # AWS credentials for tests
        AWS_ACCESS_KEY_ID: fakeMyKeyId
        AWS_SECRET_ACCESS_KEY: fakeSecretAccessKey
        AWS_DEFAULT_REGION: us-east-1

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload JaCoCo coverage to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: jacoco-coverage-report
        path: target/site/jacoco/
        retention-days: 30

    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: madrapps/jacoco-report@v1.6.1
      with:
        paths: target/site/jacoco/jacoco.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 80
        min-coverage-changed-files: 80

    - name: Create consolidated test results comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Parse test results from surefire reports
          function parseTestResults() {
            const testResults = {
              unit: { total: 0, passed: 0, failed: 0, skipped: 0, time: 0 },
              integration: { total: 0, passed: 0, failed: 0, skipped: 0, time: 0 }
            };
            
            try {
              const reportsDir = 'target/surefire-reports';
              if (fs.existsSync(reportsDir)) {
                const files = fs.readdirSync(reportsDir).filter(f => f.endsWith('.xml'));
                
                for (const file of files) {
                  const content = fs.readFileSync(path.join(reportsDir, file), 'utf8');
                  const matches = content.match(/<testsuite[^>]*name="([^"]*)"[^>]*tests="(\d+)"[^>]*failures="(\d+)"[^>]*errors="(\d+)"[^>]*skipped="(\d+)"[^>]*time="([^"]*)"[^>]*>/);
                  
                  if (matches) {
                    const [, name, tests, failures, errors, skipped, time] = matches;
                    const isIntegration = name.includes('Integration') || name.includes('IntegrationTest');
                    const category = isIntegration ? 'integration' : 'unit';
                    
                    testResults[category].total += parseInt(tests);
                    testResults[category].failed += parseInt(failures) + parseInt(errors);
                    testResults[category].skipped += parseInt(skipped);
                    testResults[category].time += parseFloat(time);
                    testResults[category].passed = testResults[category].total - testResults[category].failed - testResults[category].skipped;
                  }
                }
              }
            } catch (error) {
              console.log('Error parsing test results:', error);
            }
            
            return testResults;
          }
          
          const testResults = parseTestResults();
          const totalTests = testResults.unit.total + testResults.integration.total;
          const totalPassed = testResults.unit.passed + testResults.integration.passed;
          const totalFailed = testResults.unit.failed + testResults.integration.failed;
          const totalSkipped = testResults.unit.skipped + testResults.integration.skipped;
          const totalTime = (testResults.unit.time + testResults.integration.time).toFixed(2);
          
          // Create comprehensive test summary
          const commentBody = `## üß™ Test Results Summary
          
          ### Overall Status
          ${totalFailed === 0 ? '‚úÖ' : '‚ùå'} **${totalPassed}/${totalTests} tests passed** (${((totalPassed / totalTests) * 100).toFixed(1)}% success rate)
          
          | Test Type | Total | ‚úÖ Passed | ‚ùå Failed | ‚è≠Ô∏è Skipped | ‚è±Ô∏è Duration |
          |-----------|-------|-----------|-----------|-------------|-------------|
          | **Unit Tests** | ${testResults.unit.total} | ${testResults.unit.passed} | ${testResults.unit.failed} | ${testResults.unit.skipped} | ${testResults.unit.time.toFixed(2)}s |
          | **Integration Tests** | ${testResults.integration.total} | ${testResults.integration.passed} | ${testResults.integration.failed} | ${testResults.integration.skipped} | ${testResults.integration.time.toFixed(2)}s |
          | **Total** | **${totalTests}** | **${totalPassed}** | **${totalFailed}** | **${totalSkipped}** | **${totalTime}s** |
          
          ### Test Environment
          - **Java Version**: OpenJDK 21 (Temurin)
          - **Test Framework**: JUnit 5 with Maven Surefire
          - **Integration Testing**: DynamoDB Local via Testcontainers
          - **Coverage Tool**: JaCoCo (80% minimum required)
          
          ### Quality Gates
          ${totalFailed === 0 ? '‚úÖ' : '‚ùå'} All tests must pass
          ${testResults.unit.failed === 0 ? '‚úÖ' : '‚ùå'} Unit tests (no AWS dependencies)
          ${testResults.integration.failed === 0 ? '‚úÖ' : '‚ùå'} Integration tests (with DynamoDB Local)
          
          ${totalFailed > 0 ? `
          ### ‚ùå Test Failures
          Please check the workflow logs for detailed failure information and fix the failing tests before merging.
          ` : `
          ### ‚úÖ All Tests Passing!
          Great job! All tests are passing and the code is ready for review.
          `}
          
          ---
          *This comment was automatically generated by the CI/CD pipeline*`;
          
          // Find existing comment to update or create new one
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üß™ Test Results Summary')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, code-coverage]
    if: always()
    permissions:
      contents: read
      statuses: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Make Maven Wrapper executable
      run: chmod +x mvnw

    - name: Run quality checks
      run: |
        ./mvnw -B spotless:check
        ./mvnw -B compile
        ./mvnw -B javadoc:javadoc

    - name: Check test results
      run: |
        if [[ "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "Tests failed - quality gate not passed"
          exit 1
        fi
        echo "Quality gate passed"

    - name: Update commit status
      if: always()
      uses: ouzi-dev/commit-status-updater@v2
      with:
        name: "Quality Gate"
        status: "${{ job.status }}"
        description: "Code quality and test results"